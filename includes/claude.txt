/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   Config.hpp                                         :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: hsorel <marvin@42.fr>                      +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/09/08 19:38:06 by hsorel            #+#    #+#             */
/*   Updated: 2025/09/08 19:38:07 by hsorel           ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#pragma once

#include <iostream>
#include <vector>
#include <map>

struct LocationBloc
{
    std::string                 path;                  
    std::string                 root;                  
    std::vector<std::string>    allowed_methods;  
    size_t                      client_max_body_size;       
    std::string                 index;
    bool                        autoindex;        
    LocationBloc();
    ~LocationBloc();
    void    print();
};

struct ServerBloc
{
    std::string                         root;
    std::string                         name;
    std::string                         index;
    int                                 listen;
    std::vector<std::string>            allowed_methods;
    size_t                              client_max_body_size;
    bool                                autoindex;
    std::map<std::string, LocationBloc> locations;            
    ServerBloc();
    ~ServerBloc();
    void    print();
};/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   HttpRequest.hpp                                    :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: hsorel <marvin@42.fr>                      +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/09/08 18:42:33 by hsorel            #+#    #+#             */
/*   Updated: 2025/09/08 18:42:35 by hsorel           ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#pragma once

#include <iostream>
#include <map>
#include <vector>

/*  TEMPLATE

first line      GET /index.html HTTP/1.1\r\n
header          Host: localhost:8080\r\n
header          User-Agent: Mozilla/5.0 (X11; Linux x86_64)\r\n
header          Accept: text/html\r\n
header          Connection: keep-alive\r\n
\r\n
body(optional)  {"username":"harold","password":"42"}

*/

class HttpRequest
{
    private:
        std::string                         _buffer;
        std::string                         _method;
        std::string                         _target;
        std::string                         _version;
        std::map<std::string, std::string>  _headers;
        std::string                         _body;
        int                                 _flag;

        //private methods
        bool                        is_valid_request()const;
        std::vector<std::string>    tokenize(const std::string buffer)const;

    public:
        //constructors
        HttpRequest();
        HttpRequest(const HttpRequest &copy);

        //destructors
        ~HttpRequest();

        //getters
        const std::string                           &getMethod()const;
        const std::string                           &getTarget()const;
        const std::string                           &getVersion()const;
        const std::map<std::string, std::string>    &getHeaders()const;
        const std::string                           &getBody()const;
        const int                                   &getFlag()const;


        //public methods
        void                        parse(const std::string &buffer);
        void                        print()const;
};
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   HttpResponse.hpp                                   :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: hsorel <marvin@42.fr>                      +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/09/08 18:42:22 by hsorel            #+#    #+#             */
/*   Updated: 2025/09/08 18:42:24 by hsorel           ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#pragma once

#include <iostream>
#include "HttpRequest.hpp"

/*  TEMPLATE

first line  HTTP/1.1 200 OK\r\n
header      Content-Type: text/html\r\n
header      Content-Length: 32\r\n
header      Connection: close\r\n
\r\n
body        <html><h1>Hello World</h1></html>

*/

class HttpResponse
{
    private:
        std::string                         _version;
        int                                 _statusCode;
        std::string                         _reason;
        std::map<std::string, std::string>  _headers;
        std::string                         _body;


    public:
        //constructors
        HttpResponse();
        HttpResponse(const HttpRequest &req);

        //destructors
        ~HttpResponse();

        //setters
        void    setVersion(const std::string &verion);
        void    setStatusCode(int code);
        void    setReason(const std::string &reason);
        void    setBody(const std::string &body);
        void    setHeaders(const std::string &version, const std::string &second);

        //methods
        std::string toStr();
        void        print();
};
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   main.hpp                                           :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: hsorel <marvin@42.fr>                      +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/09/08 17:48:30 by hsorel            #+#    #+#             */
/*   Updated: 2025/09/08 17:48:31 by hsorel           ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#pragma once

#include "HttpResponse.hpp"
#include "HttpRequest.hpp"
#include "Server.hpp"
#include "ServerMonitor.hpp"
#include "Config.hpp"
#include <stdexcept>
#include <limits>
#include <sys/types.h>
#include <dirent.h>

std::string                 strtrim(std::string &str);
std::string                 brackettrim(std::string &line);
std::string                 spacetrim(std::string &line);
bool                        is_closed(std::string str);
std::vector<std::string>    ft_split(const std::string &line, const std::string &separators);
int                         get_closing_bracket_index(std::string &str);
std::string                 commenttrim(std::string &str);
size_t                      safe_atosize_t(const std::string &str);
std::string                 trimmer(std::string &str);/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   Server.hpp                                         :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: hsorel <marvin@42.fr>                      +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/09/08 17:48:36 by hsorel            #+#    #+#             */
/*   Updated: 2025/09/08 17:48:37 by hsorel           ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#pragma once

#include "Config.hpp"
#include "HttpRequest.hpp"
#include "HttpResponse.hpp"

#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <sys/select.h>
#include <sys/wait.h> 
#include <unistd.h>
#include <fcntl.h>
#include <iostream>
#include <vector>
#include <map>
#include <string>
#include <stdexcept>
#include <sstream>
#include <cstdio>
#include <fstream>
#include <cstdlib>
#include <sys/stat.h>
#include <cerrno>
#include <cstring>

class Server
{
    private:

        //based on config
        int                                 _listen;
        std::string                         _root;
        std::string                         _name;
        std::string                         _index;
        bool                                _autoindex;
        std::vector<std::string>            _allowed_methods;
        size_t                              _client_max_body_size;
        std::map<std::string, LocationBloc> _locations;

        //basic networking client<->server
        int					_server_fd;
		struct sockaddr_in	_address;
		fd_set				_read_fds;
		fd_set				_write_fds;
		fd_set				_master_fds;
		int					_max_fd;
		std::vector<int>	_client_fds;

    public:
        Server();
        //Server(const Server& other);
        Server(ServerBloc &bloc);
        //Server& operator=(const Server& other);
        ~Server();


        //networking methods
		int     get_server_fd(void) const;
		int     get_last_client_fd(void) const;
		bool    is_client_fd(int fd) const;
		void    accept_new_client(void);
		void    disconnect_client(int client_fd);

        void    init();
        void    print();
        void    shutdown();

        //response methods
        void            handle_client_request(int client_fd);
        HttpResponse    generate_response(HttpRequest &req);
        HttpResponse    generate_success_response(int code, const std::string &reason, const std::string &body);
        HttpResponse    generate_autoindex_response(const std::string &path, const std::string &target);
        HttpResponse    generate_get_response(HttpRequest &req);
        HttpResponse    generate_post_response(HttpRequest &req);
        HttpResponse    generate_delete_response(HttpRequest &req);
        HttpResponse    generate_error_response(int code, const std::string &reason, const std::string &details);



        //cgi 

        std::string     ft_execute_cgi(const std::string& script_path, const HttpRequest& request);
        std::string     ft_build_cgi_response(const std::string& cgi_output);
        std::string     ft_to_upper_env(const std::string& str);
        std::string     ft_get_directory_path(const std::string& file_path);
};/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ServerMonitor.hpp                                  :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: hsorel <marvin@42.fr>                      +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/09/08 18:00:37 by hsorel            #+#    #+#             */
/*   Updated: 2025/09/08 18:00:38 by hsorel           ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#pragma once

#include "Server.hpp"
#include <iostream>
#include <vector>
#include <algorithm>

class ServerMonitor
{
    private:
        std::string             _config;
        std::vector<Server>     _servers;
        fd_set                  _master_fds;
        int                     _max_fd;
        
        //private methods
        std::vector<std::string>    tokenize(const std::string &buffer);
        bool                        valid_brackets(const std::vector<std::string> &tokens);
        bool                        valid_semicolons(const std::vector<std::string> &tokens);
    public:

        //constructors
        ServerMonitor();
        ServerMonitor(std::string &config);

        //destructors
        ~ServerMonitor();

        //public methods
        void    addServer(Server server);
        void    parse();
        void    run();
        void    print();
        void    init_servers();

        //special function and it's special variable
        static void handle_sigint(int signum);
        static int              _flag;
};

